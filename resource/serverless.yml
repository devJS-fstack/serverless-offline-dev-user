service: api-actor

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  environment: ${file(./variables.yml):${opt:env_var, opt:stage, self:provider.stage}}

plugins:
  - serverless-offline
  - serverless-plugin-typescript

custom:
  variables: ${file(./variables.yml)}
  cors:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - istabletuser
      - Authorization
      - AccessToken
      - authorization
      - accesstoken
      - RefreshToken
      - refreshtoken
      - language
      - platformtype
      - PlatformType
      - webVersion
      - webversion

functions:
  api-info-actor:
    handler: handler.handler
    events:
      - http:
          cors: ${self:custom.cors}
          path: info-actor
          method: get 
          integration: lambda-proxy
  findUserByEmail:
    handler: handler.handler
    events:
      - http:
          cors: ${self:custom.cors}
          path: findByEmail
          method: post 
          integration: lambda-proxy
  login:
    handler: handler.handler
    events:
      - http:
          cors: ${self:custom.cors}
          path: login
          method: post 
          integration: lambda-proxy
  test:
    handler: handler.function_test
    events:
      - http:
          cors: ${self:custom.cors}
          path: test
          method: get 
          integration: lambda-proxy
  createUser:
    handler: handler.createUser
    events:
      - http:
          cors: ${self:custom.cors}
          path: createUser
          method: post 
          integration: lambda-proxy
  getListUser:
    handler: handler.getListUser
    events:
      - http:
          cors: ${self:custom.cors}
          path: users
          method: get 
          integration: lambda-proxy
  refreshToken:
    handler: handler.refreshToken
    events:
      - http:
          cors: ${self:custom.cors}
          path: refreshToken
          method: post 
          integration: lambda-proxy
  forgotPassword:
    handler: handler.forgotPassword
    events:
      - http:
          cors: ${self:custom.cors}
          path: forgotPassword
          method: post 
          integration: lambda-proxy
  resetPassword:
    handler: handler.resetPassword
    events:
      - http:
          cors: ${self:custom.cors}
          path: resetPassword
          method: post 
          integration: lambda-proxy
  changePassword:
    handler: handler.changePassword
    events:
      - http:
          cors: ${self:custom.cors}
          path: changePassword
          method: post 
          integration: lambda-proxy
  updateProfile:
    handler: handler.updateProfile
    events:
      - http:
          cors: ${self:custom.cors}
          path: updateProfile
          method: post 
          integration: lambda-proxy
  updateRegion:
    handler: handler.updateRegion
    events:
      - http:
          cors: ${self:custom.cors}
          path: updateRegion
          method: get 
          integration: lambda-proxy
